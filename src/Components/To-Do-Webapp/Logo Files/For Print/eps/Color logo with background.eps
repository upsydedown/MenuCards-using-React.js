%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2362 2368
%%HiResBoundingBox: 0 0 2361.1199 2367.1199
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2361.1199 2367.1199 re
W
q
[0.24 0 0 -0.24 0 2367.1199] cm
q
0 0 9837.499 9859.3672 re
W*
q
[3.124097 0 0 3.123911 0.0037997 0] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0 0 3148.9077 3156.0977 re
f
Q
q
[86.860893 0 0 86.855728 243.83575 243.81744] cm
/DeviceRGB {} CS
[0.0667 0.0667 0.0667] SC
/DeviceRGB {} cs
[0.0667 0.0667 0.0667] sc
4.6 5.1 m
102.900002 5.1 l
102.900002 29.200001 l
103 32.100002 103 35.200001 103.099998 37.300003 c
103.199997 39.400005 103.199997 38.300003 103.199997 38.100002 c
103.421944 35.872131 103.52195 33.638798 103.5 31.400002 c
103.5 27.200001 l
103.599998 20.5 103.5 13.700001 103.5 7 c
103.5 4.3 l
4.6 4.3 l
4.6 0.8 l
106.900002 0.8 l
106.900002 24.9 l
107 27.799999 107 30.9 107.099998 33 c
107.199997 35.099998 107.199997 34 107.199997 33.799999 c
107.421944 31.572124 107.52195 29.338791 107.5 27.099998 c
107.5 22.899998 l
107.599998 16.199997 107.5 9.399998 107.5 2.699997 c
107.5 0 l
4 0 l
4 4.5 l
0 4.5 l
0 51.599998 l
0.1 54.299999 0.1 57.399998 0 60.299999 c
0 107.899994 l
43.5 107.899994 l
60.200001 107.699997 l
71.099998 107.699997 l
73.806274 107.769455 76.506271 107.669456 79.199997 107.399994 c
0.7 107.399994 l
0.7 36.700001 l
0.6 31.5 0.6 26.299999 0.6 21 c
0.6 5.1 l
4 5.1 l
4 47.199997 l
3.9 49.899998 3.9 52.999996 3.9 55.999996 c
3.9 103.599991 l
47.5 103.599991 l
64.199997 103.399994 l
75.099998 103.399994 l
77.806274 103.46946 80.506279 103.369453 83.199997 103.099991 c
4.7 103.099991 l
4.7 16.700001 l
4.7 11.400001 4.6 9.000001 4.6 5.1 c
4.6 5.1 l
h
107.599998 58.299999 m
107.599998 53.599998 l
107.400002 45.799999 l
107.300003 42.599998 107.200005 42 107.099998 42 c
107.099998 43.900002 107 45.900002 107 47.900002 c
107 65.199997 l
107 68.299995 107 71.5 106.900002 74.399994 c
106.900002 90.099991 l
106.900002 93.399994 106.900002 96.399994 107 99.399994 c
107 103.299995 l
105.099998 103.099998 l
103.400002 103.099998 l
103.466667 101.5 103.5 99.766663 103.5 97.900002 c
103.5 73.599998 l
103.5 70.099998 103.599998 66.699997 103.599998 62.799999 c
103.599998 58.099998 l
103.400002 50.299999 l
103.300003 47.099998 103.200005 46.5 103.099998 46.5 c
103.099998 48.400002 103 50.400002 103 52.400002 c
103 69.699997 l
103 72.799995 103 76 102.900002 78.899994 c
102.900002 94.599991 l
102.900002 97.899994 102.900002 100.399994 103 103.099991 c
92.400002 103.099991 l
92 103.199989 91.099998 103.199989 91.5 103.199989 c
95 103.399986 l
103 103.399986 l
103 107.599983 l
101.099998 107.399986 l
88.400002 107.399986 l
88 107.499985 87.099998 107.499985 87.5 107.499985 c
91 107.699982 l
103.099998 107.699982 l
103.199997 107.999985 103.199997 107.79998 103.299995 106.499985 c
103.399994 105.199989 103.399994 104.499985 103.399994 103.499985 c
107.099991 103.499985 l
107.199989 103.799988 107.199989 103.599983 107.299988 102.299988 c
107.399986 100.999992 107.399986 96.999985 107.499985 93.599991 c
107.499985 69.300003 l
107.599983 65.5 107.699982 62.100002 107.599983 58.300003 c
107.599998 58.299999 l
h
f
Q
q
[26.014172 0 0 26.012623 3624.7007 1796.0947] cm
/DeviceRGB {} CS
[0.2196 0.7765 0.7412] SC
/DeviceRGB {} cs
[0.2196 0.7765 0.7412] sc
50.536999 5 m
42.350998 5 l
41.552998 5 40.894997 5.743 40.894997 6.651 c
40.894997 6.651 41.556995 11.59 41.556995 19.012001 c
41.556995 26.435001 40.894997 31.372002 40.894997 31.372002 c
40.894997 32.279003 41.552998 33.021 42.350998 33.021 c
50.536999 33.021 l
51.334999 33.021 51.990997 32.278999 51.990997 31.372 c
51.990997 31.372 51.458996 25.538 51.458996 19.012001 c
51.458996 12.483002 51.990997 6.651001 51.990997 6.651001 c
51.991001 5.743 51.334999 5 50.536999 5 c
h
50.536999 35.988998 m
42.350998 35.988998 l
41.552998 35.988998 40.894997 36.732998 40.894997 37.637997 c
40.894997 37.637997 41.556995 42.576996 41.556995 49.999996 c
41.556995 57.421997 40.894997 62.358997 40.894997 62.358997 c
40.894997 63.266998 41.552998 64.007996 42.350998 64.007996 c
50.536999 64.007996 l
51.334999 64.007996 51.990997 63.266994 51.990997 62.358997 c
51.990997 62.358997 51.458996 56.526997 51.458996 49.999996 c
51.458996 43.469997 51.990997 37.637997 51.990997 37.637997 c
51.991001 36.733002 51.334999 35.988998 50.536999 35.988998 c
h
50.536999 66.977997 m
42.350998 66.977997 l
41.552998 66.977997 40.894997 67.720993 40.894997 68.626999 c
40.894997 68.626999 41.556995 73.568001 41.556995 80.987999 c
41.556995 88.410995 40.894997 93.348999 40.894997 93.348999 c
40.894997 94.254997 41.552998 94.999001 42.350998 94.999001 c
50.536999 94.999001 l
51.334999 94.999001 51.990997 94.254997 51.990997 93.348999 c
51.990997 93.348999 51.458996 87.517998 51.458996 80.987999 c
51.458996 74.460999 51.990997 68.626999 51.990997 68.626999 c
51.991001 67.721001 51.334999 66.977997 50.536999 66.977997 c
h
66.928001 38.567001 m
59.099998 38.567001 l
58.335999 38.567001 57.709999 39.279003 57.709999 40.147003 c
57.709999 40.147003 58.342999 44.872002 58.342999 51.967003 c
58.342999 59.062004 57.709999 63.785999 57.709999 63.785999 c
57.709999 64.655998 58.335999 65.365997 59.099998 65.365997 c
66.928001 65.365997 l
67.693001 65.365997 68.319 64.655998 68.319 63.785995 c
68.319 63.785995 67.811996 58.211994 67.811996 51.967995 c
67.811996 45.723995 68.319 40.147995 68.319 40.147995 c
68.318001 39.278999 67.692001 38.567001 66.928001 38.567001 c
h
66.928001 68.203003 m
59.099998 68.203003 l
58.335999 68.203003 57.709999 68.913002 57.709999 69.780006 c
57.709999 69.780006 58.342999 74.503006 58.342999 81.601006 c
58.342999 88.699005 57.709999 93.421005 57.709999 93.421005 c
57.709999 94.291008 58.335999 94.999008 59.099998 94.999008 c
66.928001 94.999008 l
67.693001 94.999008 68.319 94.291008 68.319 93.421005 c
68.319 93.421005 67.811996 87.845001 67.811996 81.601006 c
67.811996 75.359009 68.319 69.780006 68.319 69.780006 c
68.318001 68.913002 67.692001 68.203003 66.928001 68.203003 c
h
76.878998 45.963001 m
74.417999 50.887001 66.587997 59.609001 69.720001 68.203003 c
77.324997 62.033001 74.865997 56.029999 76.878998 45.963001 c
h
93.115997 62.356998 m
87.653999 63.028999 76.056 61.334999 70.632996 68.695999 c
79.977997 71.616997 83.615997 66.251999 93.115997 62.356998 c
h
70.723 69.730003 m
73.460999 79.131004 79.945999 79.192001 88.445999 84.954002 c
84.860001 80.772003 79.855003 70.177002 70.723 69.730003 c
h
37.75 33.042 m
41.286999 23.334999 32.441002 13.48 29.66 7.916 c
31.934 19.288 29.156 26.07 37.75 33.042 c
h
36.716 33.613998 m
29.702999 23.610001 14.16 25.503 6.884 24.43 c
19.451 29.929001 24.135 37.217999 36.716 33.613998 c
h
24.297001 45.963001 m
30.572001 41.713001 35.361 41.666 37.382 34.726002 c
30.638 35.055 26.943001 42.881001 24.297001 45.963001 c
h
f
Q
q
[71.212601 0 0 71.208366 2344.6643 4213.2563] cm
/DeviceRGB {} CS
[0.0667 0.0667 0.0667] SC
/DeviceRGB {} cs
[0.0667 0.0667 0.0667] sc
2 40 m
2 8 l
8 8 l
14 8 14 12.4 14 23.16 c
14 35.559998 14 40 8 40 c
2 40 l
h
6 36 m
8 36 l
10.24 36 10.24 34.32 10.24 23.16 c
10.24 13.16 10.24 11.2 8 11.2 c
6 11.2 l
6 36 l
h
19.700001 23.16 m
19.700001 12 19.940001 7.599999 25.940001 7.599999 c
31.940001 7.599999 32.18 12 32.18 23.16 c
32.18 35.959999 31.940001 40.400002 25.940001 40.400002 c
19.940001 40.400002 19.700001 35.960003 19.700001 23.160002 c
19.700001 23.16 l
h
23.700001 23.16 m
23.700001 34.720001 23.700001 36.400002 25.940001 36.400002 c
28.18 36.400002 28.18 34.720001 28.18 23.160002 c
28.18 12.760002 28.18 10.800002 25.940001 10.800002 c
23.700001 10.800002 23.700001 12.760002 23.700001 23.160002 c
23.700001 23.16 l
h
49.580002 40 m
49.580002 8 l
53.580002 8 l
53.580002 40 l
49.580002 40 l
h
58.48 11.6 m
58.48 8 l
70.479996 8 l
70.479996 11.6 l
66.479996 11.6 l
66.479996 40 l
62.479996 40 l
62.479996 11.6 l
58.479996 11.6 l
58.48 11.6 l
h
f
Q
q
[27.846052 0 0 27.844395 2448.5408 7380.0146] cm
/DeviceRGB {} CS
[0.2196 0.7765 0.7412] SC
/DeviceRGB {} cs
[0.2196 0.7765 0.7412] sc
6.18 7.32 m
8 7.32 9.94 8.020001 9.94 10.08 c
9.94 10.56 9.62 10.78 9.28 10.78 c
8.94 10.78 8.58 10.54 8.58 10.08 c
8.58 9.92 8.48 8.62 6.18 8.62 c
4.36 8.62 3.56 9.34 3.56 11.06 c
3.56 15.879999 l
3.56 17.619999 4.54 18.16 6.18 18.16 c
7.84 18.16 8.76 17.48 8.76 15.86 c
8.76 15.4 9.1 15.179999 9.42 15.179999 c
9.76 15.179999 10.08 15.4 10.08 15.86 c
10.08 18.559999 8.58 19.459999 6.18 19.459999 c
3.58 19.459999 2.26 18.5 2.26 15.879999 c
2.26 11.06 l
2.26 8.219999 3.68 7.32 6.18 7.32 c
6.18 7.32 l
h
14.78 18.76 m
14.78 8 l
14.78 7.58 15.099999 7.38 15.44 7.38 c
15.78 7.38 16.119999 7.58 16.119999 8 c
16.119999 12.58 l
20.66 12.58 l
20.66 8 l
20.66 7.58 20.98 7.36 21.299999 7.36 c
21.619999 7.36 21.959999 7.58 21.959999 8 c
21.959999 18.76 l
21.959999 19.18 21.619999 19.4 21.299999 19.4 c
20.98 19.4 20.66 19.18 20.66 18.76 c
20.66 13.940001 l
16.119999 13.940001 l
16.119999 18.76 l
16.119999 19.18 15.779999 19.4 15.439999 19.4 c
15.099999 19.4 14.779999 19.18 14.779999 18.76 c
14.78 18.76 l
h
27.02 18.700001 m
27.02 8.06 l
27.02 7.6 27.380001 7.360001 27.720001 7.360001 c
32.32 7.360001 l
32.759998 7.360001 32.98 7.680001 32.98 8.020001 c
32.98 8.360001 32.759998 8.700001 32.32 8.700001 c
28.360001 8.700001 l
28.360001 12.580001 l
31.5 12.580001 l
31.959999 12.580001 32.18 12.900001 32.18 13.240001 c
32.18 13.580001 31.940001 13.940001 31.5 13.940001 c
28.360001 13.940001 l
28.360001 18.08 l
32.32 18.08 l
32.739998 18.08 32.959999 18.42 32.959999 18.74 c
32.959999 19.08 32.739998 19.4 32.32 19.4 c
27.719999 19.4 l
27.379999 19.4 27.019999 19.279999 27.019999 18.699999 c
27.02 18.700001 l
h
41.220001 7.32 m
43.040001 7.32 44.98 8.020001 44.98 10.08 c
44.98 10.56 44.66 10.78 44.32 10.78 c
43.98 10.78 43.619999 10.54 43.619999 10.08 c
43.619999 9.92 43.52 8.62 41.219997 8.62 c
39.399998 8.62 38.599998 9.34 38.599998 11.06 c
38.599998 15.879999 l
38.599998 17.619999 39.579998 18.16 41.219997 18.16 c
42.879997 18.16 43.799995 17.48 43.799995 15.86 c
43.799995 15.4 44.139996 15.179999 44.459995 15.179999 c
44.799995 15.179999 45.119995 15.4 45.119995 15.86 c
45.119995 18.559999 43.619995 19.459999 41.219994 19.459999 c
38.619995 19.459999 37.299995 18.5 37.299995 15.879999 c
37.299995 11.06 l
37.299995 8.219999 38.719994 7.32 41.219994 7.32 c
41.220001 7.32 l
h
49.860001 18.76 m
49.860001 8 l
49.860001 7.58 50.18 7.36 50.5 7.36 c
50.82 7.36 51.16 7.58 51.16 8 c
51.16 12.84 l
55.02 7.66 l
55.52 6.980001 56.66 7.64 56.139999 8.34 c
53.899998 11.42 l
56.639999 18.52 l
56.82 19 56.459999 19.4 56.040001 19.4 c
55.799999 19.4 55.52 19.219999 55.380001 18.84 c
54.600002 16.84 53.760002 14.76 52.98 12.72 c
51.16 15.08 l
51.16 18.76 l
51.16 19.18 50.82 19.4 50.5 19.4 c
50.18 19.4 49.860001 19.18 49.860001 18.76 c
h
61.720001 12.48 m
64.880005 12.48 l
65.300003 12.48 65.520004 12.799999 65.520004 13.12 c
65.520004 13.46 65.300003 13.8 64.880005 13.8 c
61.740005 13.8 l
61.320007 13.8 61.100006 13.480001 61.100006 13.14 c
61.100006 12.820001 61.320007 12.480001 61.720005 12.480001 c
61.720001 12.48 l
h
69.660004 18.780001 m
69.660004 8.000001 l
69.660004 7.580001 69.980003 7.360001 70.300003 7.360001 c
70.620003 7.360001 70.960007 7.580001 70.960007 8.000001 c
70.960007 18.780001 l
70.960007 19.640001 69.660004 19.640001 69.660004 18.780001 c
h
82.739998 8 m
82.739998 18.76 l
82.739998 19.18 82.419998 19.4 82.099998 19.4 c
81.860001 19.4 81.540001 19.219999 81.400002 18.959999 c
79.900002 16.019999 78.779999 13.759999 77.279999 10.799999 c
77.279999 18.759998 l
77.279999 19.179998 76.959999 19.399998 76.619995 19.399998 c
76.299995 19.399998 75.959991 19.179998 75.959991 18.759998 c
75.959991 7.999998 l
75.959991 7.299998 76.959991 7.259998 77.179993 7.679998 c
81.399994 16.019999 l
81.399994 7.999998 l
81.399994 7.579998 81.719994 7.359998 82.059998 7.359998 c
82.400002 7.359998 82.739998 7.579998 82.739998 7.999998 c
82.739998 8 l
h
94.959999 7.36 m
101 7.36 l
101.419998 7.36 101.620003 7.7 101.620003 8.04 c
101.620003 8.379999 101.420006 8.7 101 8.7 c
98.720001 8.7 l
98.720001 18.76 l
98.720001 19.18 98.380005 19.4 98.040001 19.4 c
97.699997 19.4 97.379997 19.18 97.379997 18.76 c
97.379997 8.7 l
94.959999 8.7 l
94.540001 8.7 94.339996 8.38 94.339996 8.04 c
94.339996 7.7 94.539993 7.36 94.959999 7.36 c
h
105.82 18.76 m
105.82 8 l
105.82 7.58 106.139999 7.38 106.480003 7.38 c
106.820007 7.38 107.160004 7.58 107.160004 8 c
107.160004 12.58 l
111.700005 12.58 l
111.700005 8 l
111.700005 7.58 112.020004 7.36 112.340004 7.36 c
112.660004 7.36 113.000008 7.58 113.000008 8 c
113.000008 18.76 l
113.000008 19.18 112.660011 19.4 112.340004 19.4 c
112.019997 19.4 111.700005 19.18 111.700005 18.76 c
111.700005 13.940001 l
107.160004 13.940001 l
107.160004 18.76 l
107.160004 19.18 106.820007 19.4 106.480003 19.4 c
106.139999 19.4 105.82 19.18 105.82 18.76 c
h
118.059998 18.700001 m
118.059998 8.06 l
118.059998 7.6 118.419998 7.360001 118.759995 7.360001 c
123.359993 7.360001 l
123.799995 7.360001 124.019997 7.680001 124.019997 8.020001 c
124.019997 8.360001 123.799995 8.700001 123.359993 8.700001 c
119.399994 8.700001 l
119.399994 12.580001 l
122.539993 12.580001 l
122.999992 12.580001 123.219994 12.900001 123.219994 13.240001 c
123.219994 13.580001 122.979996 13.940001 122.539993 13.940001 c
119.399994 13.940001 l
119.399994 18.08 l
123.359993 18.08 l
123.779991 18.08 123.999992 18.42 123.999992 18.74 c
123.999992 19.08 123.779991 19.4 123.359993 19.4 c
118.759995 19.4 l
118.419998 19.4 118.059998 19.279999 118.059998 18.699999 c
118.059998 18.700001 l
h
135.740005 7.36 m
141.779999 7.36 l
142.199997 7.36 142.399994 7.7 142.399994 8.04 c
142.399994 8.379999 142.199997 8.7 141.779999 8.7 c
139.5 8.7 l
139.5 18.76 l
139.5 19.18 139.160004 19.4 138.820007 19.4 c
138.480011 19.4 138.160004 19.18 138.160004 18.76 c
138.160004 8.7 l
135.740005 8.7 l
135.320007 8.7 135.12001 8.38 135.12001 8.04 c
135.12001 7.7 135.320007 7.36 135.740005 7.36 c
h
152.5 18.860001 m
151.720001 16.32 l
148 16.32 l
147.259995 18.82 l
147 19.68 145.679993 19.42 145.959991 18.539999 c
146.999985 15.039999 148.019989 11.48 149.039993 7.939999 c
149.159988 7.559999 149.479996 7.359999 149.799988 7.359999 c
150.099991 7.359999 150.419983 7.559999 150.539993 7.939999 c
153.719986 18.539999 l
153.939987 19.299999 152.759979 19.719999 152.499985 18.859999 c
152.5 18.860001 l
h
149.839996 10.06 m
148.399994 14.980001 l
151.339996 14.980001 l
150.839996 13.3 150.37999 11.860001 149.839996 10.06 c
h
157.880005 17.68 m
157.440002 16.860001 158.559998 16.26 159.080002 17.08 c
159.339996 17.5 160.119995 18.219999 161.360001 18.219999 c
161.880005 18.219999 163.180008 17.84 163.360001 16.359999 c
163.479996 15.459999 162.619995 14.579999 161.139999 13.839998 c
159.059998 12.859999 157.479996 11.999998 157.479996 10.279999 c
157.479996 8.239999 159.199997 7.279999 161.039993 7.279999 c
162.699997 7.279999 163.619995 8.299999 163.939987 8.819999 c
164.399994 9.559999 163.399994 10.279999 162.839981 9.559999 c
162.559982 9.199999 162.019974 8.599999 161.039978 8.599999 c
159.939972 8.599999 158.799973 9.119999 158.799973 10.279999 c
158.799973 11.199999 159.819977 11.719999 161.339966 12.439999 c
163.119965 13.319999 164.979965 14.179998 164.699966 16.519999 c
164.479965 18.359999 163.079971 19.539999 161.35997 19.539999 c
160.059967 19.539999 158.459976 18.839998 157.879974 17.679998 c
157.880005 17.68 l
h
169.16 18.76 m
169.16 8 l
169.16 7.58 169.48001 7.36 169.8 7.36 c
170.12 7.36 170.46001 7.58 170.46001 8 c
170.46001 12.84 l
174.32001 7.66 l
174.82001 6.980001 175.96001 7.64 175.44 8.34 c
173.2 11.42 l
175.94 18.52 l
176.12 19 175.76001 19.4 175.34 19.4 c
175.09999 19.4 174.81999 19.219999 174.67999 18.84 c
173.89999 16.84 173.06 14.76 172.28 12.72 c
170.45999 15.08 l
170.45999 18.76 l
170.45999 19.18 170.12 19.4 169.79999 19.4 c
169.47998 19.4 169.15999 19.18 169.15999 18.76 c
169.16 18.76 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
